@page "/fetchdata"
@attribute [Authorize]
@using UrlShortener.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using Flurl
@using CurrieTechnologies.Razor.Clipboard
@inject HttpClient Http
@inject IConfiguration Configuration
@inject ClipboardService clipboard
@inject NotificationService NotificationService
@inject DialogService _dialogService
@implements IDisposable
<EditForm Model="@getShortUrlsRequest" OnValidSubmit="@(_ => GetShortUrls(true))">
    <div class="row">
        <div class="col-md-8">
            <RadzenTextBox @bind-Value="@getShortUrlsRequest.Query" Style="width:100%" Placeholder="Search..." />
        </div>

        <div class="col-md-2">
            <Radzen.Blazor.RadzenButton ButtonType="ButtonType.Submit" Click="@(_ => GetShortUrls(true))" Raised="true" Icon="refresh">Search</Radzen.Blazor.RadzenButton>

        </div>
    </div>

</EditForm>
<div class="d-flex align-items-center justify-content-end">
    <RadzenButton Icon="add" Click="@(async () =>await OpenOrder())" Text="Customer" />
</div>

<br />
<RadzenDataGrid IsLoading=@isLoading Count="@((int)getShortUrlsResponse.TotalCount)" Data="@getShortUrlsResponse.Items" LoadData="@LoadData" AllowPaging="true" PageSize="@getShortUrlsRequest.MaxResultCount" PagerHorizontalAlign="HorizontalAlign.Center" TItem="ShortUrlsResponse" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="ShortName" Title="Short Url" Width="100px">
            <Template Context="data">
                <RadzenLink Path="@(Configuration["BaseOfShortUrl"]+data.ShortName)" Text="@data.ShortName" target="_blank" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="ShortName" Title="" Width="20px">
            <Template Context="data">
                <Radzen.Blazor.RadzenButton Icon="bookmarks" Click="@(async e => { await clipboard.WriteTextAsync((Configuration["BaseOfShortUrl"]+data.ShortName));  NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = data.ShortName+" Short Url copied"}); })"></Radzen.Blazor.RadzenButton>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="DestinationUrl" Title="Destination Url" Width="140px">
            <Template Context="data">
                <RadzenLink Path="@data.DestinationUrl" Text="@data.DestinationUrl" target="_blank" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="DestinationUrl" Title="" Width="20px">
            <Template Context="data">
                <Radzen.Blazor.RadzenButton Icon="bookmarks" Click="@(async e => { await clipboard.WriteTextAsync(data.DestinationUrl);  NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = data.ShortName+" Destination Url copied"}); })"></Radzen.Blazor.RadzenButton>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="CreationDateTime" Title="Created on" Width="140px">
            <Template Context="data">
                @DateTimeOffset.FromUnixTimeMilliseconds(data.CreationDateTime).ToLocalTime().ToString("dddd, dd MMMM yyyy hh:mm tt")
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="LastUpdateDateTime" Title="Last Updated on" Width="200px">
            <Template Context="data">
                @DateTimeOffset.FromUnixTimeMilliseconds(data.LastUpdateDateTime).ToLocalTime().ToString("dddd, dd MMMM yyyy hh:mm tt")
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    private CreateOrUpdateShortUrl createOrEditCustomerModal;
    GetShortUrlsRequest getShortUrlsRequest = new GetShortUrlsRequest();
    GetShortUrlsResponse getShortUrlsResponse = new GetShortUrlsResponse();
    bool isLoading = false;


    protected override async Task OnInitializedAsync()
    {

        await GetShortUrls();
        isLoading = false;
    }
 
    async Task LoadData(LoadDataArgs args)
    {


        await Task.Yield();
        try
        {

            getShortUrlsRequest.SkipCount = args.Skip ?? 0;
            getShortUrlsRequest.MaxResultCount = args.Top ?? 10;
            await GetShortUrls();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    async Task GetShortUrls(bool resetPaginationData = false)
    {
        if (resetPaginationData)
        {
            getShortUrlsRequest.SkipCount = 0;
        }
        isLoading = true;
        var url = "/api/short-urls"
            .SetQueryParams(new
            {
                getShortUrlsRequest.MaxResultCount,
                getShortUrlsRequest.SkipCount,
                getShortUrlsRequest.Query
            });
        getShortUrlsResponse = await Http.GetFromJsonAsync<GetShortUrlsResponse>(url);
        isLoading = false;
    }





    public void Dispose()
    {
        _dialogService.OnClose -= Close;
    }

    private async Task OpenOrder()
    {
        await _dialogService.OpenAsync<CreateOrUpdateShortUrl>($"Add Short URL",
            new Dictionary<string, object>() {{"createShortUrlRequest", new CreateShortUrlRequest()}},
            new DialogOptions() {Width = "700px", Height = "275px", Resizable = true, Draggable = true});
    }


    async void Close(dynamic result)
    {
        if (result != null)
        {
            if (result is bool userCreatedOrUpdated)
            {
                if (userCreatedOrUpdated)
                {
                   await GetShortUrls(true);
                    StateHasChanged();
                }
            }
        }
    }
}