@page "/fetchdata"
@attribute [Authorize]
@using UrlShortener.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using Flurl
@using CurrieTechnologies.Razor.Clipboard
@inject HttpClient Http
@inject IConfiguration Configuration
@inject ClipboardService clipboard
@inject NotificationService NotificationService
@inject DialogService _dialogService
@inject ContextMenuService ContextMenuService
@implements IDisposable
<EditForm Model="@getShortUrlsRequest" OnValidSubmit="@(_ => GetShortUrls(true))">
    <div class="row">
        <div class="col-md-8">
            <RadzenTextBox @bind-Value="@getShortUrlsRequest.Query" Style="width:100%" Placeholder="Search..." />
        </div>

        <div class="col-md-2">
            <Radzen.Blazor.RadzenButton ButtonType="ButtonType.Submit" Click="@(_ => GetShortUrls(true))" Raised="true" Icon="refresh">Search</Radzen.Blazor.RadzenButton>

        </div>
    </div>

</EditForm>
<div class="d-flex align-items-center justify-content-end">
    <RadzenButton Icon="add" Click="@(async () =>await AddShortLink())" Text="Link" />
</div>

<br />
<RadzenDataGrid IsLoading=@isLoading Count="@((int)getShortUrlsResponse.TotalCount)" Data="@getShortUrlsResponse.Items" LoadData="@LoadData" AllowPaging="true" PageSize="@getShortUrlsRequest.MaxResultCount" PagerHorizontalAlign="HorizontalAlign.Center" TItem="ShortUrlsResponse" ColumnWidth="200px"

                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedShortUrlsResponse
                CellContextMenu="@OnCellContextMenu">
    <Columns>
        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="ShortName" Title="Short Url" Width="100px">
            <Template Context="data">
                <RadzenLink Path="@(Configuration["RemoteHostUrl"] + "/" + data.ShortName)" Text="@data.ShortName" target="_blank" />
                <Radzen.Blazor.RadzenButton ButtonStyle="ButtonStyle.Light" Style="float: right;" Icon="content_copy" Click="@(async e => { await clipboard.WriteTextAsync((Configuration["RemoteHostUrl"]+"/"+data.ShortName));  NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = data.ShortName+" Short Url copied"}); })"></Radzen.Blazor.RadzenButton>
            </Template>
        </RadzenDataGridColumn>

        
        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="DestinationUrl" Title="Destination Url" Width="140px">
            <Template Context="data">
                <RadzenLink Path="@data.DestinationUrl" Text="@data.DestinationUrl" target="_blank" />
                <Radzen.Blazor.RadzenButton ButtonStyle="ButtonStyle.Light" Style="float: right;" Icon="content_copy" Click="@(async e => { await clipboard.WriteTextAsync(data.DestinationUrl);  NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = data.ShortName+" Destination Url copied"}); })"></Radzen.Blazor.RadzenButton>

            </Template>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="CreationDateTime" Title="Created on" Width="40px">
            <Template Context="data">
                @DateTimeOffset.FromUnixTimeMilliseconds(data.CreationDateTime).ToLocalTime().ToString("dd MMMM yyyy hh:mm tt")
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="ShortUrlsResponse" Property="LastUpdateDateTime" Title="Last Updated on" Width="40px">
            <Template Context="data">
                @DateTimeOffset.FromUnixTimeMilliseconds(data.LastUpdateDateTime).ToLocalTime().ToString("dd MMMM yyyy hh:mm tt")
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    IList<ShortUrlsResponse> selectedShortUrlsResponse;
    private CreateOrUpdateShortUrl createOrEditCustomerModal;
    GetShortUrlsRequest getShortUrlsRequest = new GetShortUrlsRequest();
    GetShortUrlsResponse getShortUrlsResponse = new GetShortUrlsResponse();
    bool isLoading = false;


    protected override async Task OnInitializedAsync()
    {

        await GetShortUrls();
        isLoading = false;
    }

    Task OnCellContextMenu(DataGridCellMouseEventArgs<ShortUrlsResponse> args)
    {
        selectedShortUrlsResponse = new List<ShortUrlsResponse>() { args.Data };

        async void Click(MenuItemEventArgs e)
        {
            ContextMenuService.Close();
            if (e.Value.ToString() == "1")
            {
                await ViewShortUrlClicks(args.Data);
            }
            else if (e.Value.ToString() == "2")
            {
                await EditShortLink(args.Data);
            }
            else if (e.Value.ToString() == "3")
            {
                await Delete(args.Data); 
            }
           
        }

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = 1 },
                new ContextMenuItem(){ Text = "Edit", Value = 2 }, 
                new ContextMenuItem(){ Text = "Delete", Value = 3 },
            }, Click);
        return Task.CompletedTask;
    }


    async Task LoadData(LoadDataArgs args)
    {


        await Task.Yield();
        try
        {

            getShortUrlsRequest.SkipCount = args.Skip ?? 0;
            getShortUrlsRequest.MaxResultCount = args.Top ?? 10;
            await GetShortUrls();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    async Task GetShortUrls(bool resetPaginationData = false)
    {
        if (resetPaginationData)
        {
            getShortUrlsRequest.SkipCount = 0;
        }
        isLoading = true;
        var url = "/api/short-urls"
            .SetQueryParams(new
            {
                getShortUrlsRequest.MaxResultCount,
                getShortUrlsRequest.SkipCount,
                getShortUrlsRequest.Query
            });
        getShortUrlsResponse = await Http.GetFromJsonAsync<GetShortUrlsResponse>(url);
        isLoading = false;
    }





    public void Dispose()
    {
        _dialogService.OnClose -= Close;
    }

    private async Task AddShortLink()
    {
        await _dialogService.OpenAsync<CreateOrUpdateShortUrl>($"Add Short URL",
            new Dictionary<string, object>() { { "CreateOrUpdateShortUrlRequest", new CreateOrUpdateShortUrlRequest() } },
            new DialogOptions() { Width = "700px", Height = "275px", Resizable = true, Draggable = true });
    }

    private async Task EditShortLink(ShortUrlsResponse response)
    {
        await _dialogService.OpenAsync<CreateOrUpdateShortUrl>($"Add Short URL",
            new Dictionary<string, object>() { { "CreateOrUpdateShortUrlRequest", new CreateOrUpdateShortUrlRequest()
            {
                ShortName = response.ShortName,
                DestinationUrl = response.DestinationUrl,
                IsEdit = true
            } } },
            new DialogOptions() { Width = "700px", Height = "275px", Resizable = true, Draggable = true });
    }

    private async Task ViewShortUrlClicks(ShortUrlsResponse response)
    {
        await _dialogService.OpenAsync<ShortUrlClickList>($"{response.ShortName}",
            new Dictionary<string, object>() { { "shortUrl", response } },
            new DialogOptions() { Width = "1581px", Height = "600px", Resizable = true, Draggable = true, Top = "20px" });
    }

    private async Task Delete(ShortUrlsResponse shortUrlsResponse)
    {
        var res = await _dialogService.Confirm("Are you sure?", $"Delete: {shortUrlsResponse.ShortName} ", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (res.HasValue && res.Value)
        {
            await Http.DeleteAsync($"/api/short-url/{shortUrlsResponse.ShortName}");
        }
    }

    async void Close(dynamic result)
    {
        if (result != null)
        {
            if (result is bool userCreatedOrUpdated)
            {
                if (userCreatedOrUpdated)
                {
                    await GetShortUrls(true);
                    StateHasChanged();
                }
            }
        }
    }
}
